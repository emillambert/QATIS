from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'build': '/Users/emilwl/Documents/QATIS/build', 'prompts': '/Users/emilwl/Documents/QATIS/prompts', 'qatis': '/Users/emilwl/Documents/QATIS/qatis', 'search_results': '/Users/emilwl/Documents/QATIS/search_results', 'search_results_social': '/Users/emilwl/Documents/QATIS/search_results_social'}
NAMESPACES: dict[str, list[str]] = {'search_results': ['/Users/emilwl/Documents/QATIS/search_results'], 'prompts': ['/Users/emilwl/Documents/QATIS/prompts'], 'build': ['/Users/emilwl/Documents/QATIS/build'], 'search_results_social': ['/Users/emilwl/Documents/QATIS/search_results_social'], 'search_results.20251016_170207': ['/Users/emilwl/Documents/QATIS/search_results/20251016_170207'], 'search_results.20251015_005430': ['/Users/emilwl/Documents/QATIS/search_results/20251015_005430'], 'search_results.20251015_110632': ['/Users/emilwl/Documents/QATIS/search_results/20251015_110632'], 'search_results.20251016_194644': ['/Users/emilwl/Documents/QATIS/search_results/20251016_194644'], 'search_results.20251015_174740': ['/Users/emilwl/Documents/QATIS/search_results/20251015_174740'], 'search_results.20251015_094825': ['/Users/emilwl/Documents/QATIS/search_results/20251015_094825'], 'search_results.20251015_175543': ['/Users/emilwl/Documents/QATIS/search_results/20251015_175543'], 'search_results.20251015_104349': ['/Users/emilwl/Documents/QATIS/search_results/20251015_104349'], 'search_results.20251015_181910': ['/Users/emilwl/Documents/QATIS/search_results/20251015_181910'], 'search_results.20251015_114133': ['/Users/emilwl/Documents/QATIS/search_results/20251015_114133'], 'search_results.20251015_104353': ['/Users/emilwl/Documents/QATIS/search_results/20251015_104353'], 'search_results.20251016_190144': ['/Users/emilwl/Documents/QATIS/search_results/20251016_190144'], 'search_results.20251016_195400': ['/Users/emilwl/Documents/QATIS/search_results/20251016_195400'], 'search_results.20251015_111559': ['/Users/emilwl/Documents/QATIS/search_results/20251015_111559'], 'search_results.20251016_181544': ['/Users/emilwl/Documents/QATIS/search_results/20251016_181544'], 'search_results.20251015_001826': ['/Users/emilwl/Documents/QATIS/search_results/20251015_001826'], 'search_results.20251016_185922': ['/Users/emilwl/Documents/QATIS/search_results/20251016_185922'], 'search_results.20251015_173711': ['/Users/emilwl/Documents/QATIS/search_results/20251015_173711'], 'search_results.20251015_181434': ['/Users/emilwl/Documents/QATIS/search_results/20251015_181434'], 'search_results.20251015_111056': ['/Users/emilwl/Documents/QATIS/search_results/20251015_111056'], 'search_results.20251015_103707': ['/Users/emilwl/Documents/QATIS/search_results/20251015_103707'], 'search_results.20251015_112023': ['/Users/emilwl/Documents/QATIS/search_results/20251015_112023'], 'search_results.20251015_113557': ['/Users/emilwl/Documents/QATIS/search_results/20251015_113557'], 'search_results.20251015_173658': ['/Users/emilwl/Documents/QATIS/search_results/20251015_173658'], 'search_results.20251015_104356': ['/Users/emilwl/Documents/QATIS/search_results/20251015_104356'], 'search_results.20251016_185404': ['/Users/emilwl/Documents/QATIS/search_results/20251016_185404'], 'search_results.20251016_183709': ['/Users/emilwl/Documents/QATIS/search_results/20251016_183709'], 'search_results.20251015_180324': ['/Users/emilwl/Documents/QATIS/search_results/20251015_180324'], 'search_results.20251015_112528': ['/Users/emilwl/Documents/QATIS/search_results/20251015_112528'], 'search_results.20251015_180143': ['/Users/emilwl/Documents/QATIS/search_results/20251015_180143'], 'qatis.prompts': ['/Users/emilwl/Documents/QATIS/qatis/prompts'], 'build.lib': ['/Users/emilwl/Documents/QATIS/build/lib'], 'build.lib.build': ['/Users/emilwl/Documents/QATIS/build/lib/build'], 'build.lib.qatis.prompts': ['/Users/emilwl/Documents/QATIS/build/lib/qatis/prompts'], 'build.lib.build.lib': ['/Users/emilwl/Documents/QATIS/build/lib/build/lib'], 'build.lib.build.lib.build': ['/Users/emilwl/Documents/QATIS/build/lib/build/lib/build'], 'build.lib.build.lib.build.lib': ['/Users/emilwl/Documents/QATIS/build/lib/build/lib/build/lib'], 'build.lib.build.lib.build.lib.build': ['/Users/emilwl/Documents/QATIS/build/lib/build/lib/build/lib/build'], 'build.lib.build.lib.build.lib.build.lib': ['/Users/emilwl/Documents/QATIS/build/lib/build/lib/build/lib/build/lib'], 'search_results_social.20251015_110651': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_110651'], 'search_results_social.20251015_181442': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_181442'], 'search_results_social.20251015_104349': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_104349'], 'search_results_social.20251016_181810': ['/Users/emilwl/Documents/QATIS/search_results_social/20251016_181810'], 'search_results_social.20251015_010850': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_010850'], 'search_results_social.20251015_103728': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_103728'], 'search_results_social.20251015_104353': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_104353'], 'search_results_social.20251015_181918': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_181918'], 'search_results_social.20251015_180327': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_180327'], 'search_results_social.20251015_011227': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_011227'], 'search_results_social.20251015_180146': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_180146'], 'search_results_social.20251016_190400': ['/Users/emilwl/Documents/QATIS/search_results_social/20251016_190400'], 'search_results_social.20251015_174744': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_174744'], 'search_results_social.20251015_181644': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_181644'], 'search_results_social.20251016_194649': ['/Users/emilwl/Documents/QATIS/search_results_social/20251016_194649'], 'search_results_social.20251015_111155': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_111155'], 'search_results_social.20251015_173715': ['/Users/emilwl/Documents/QATIS/search_results_social/20251015_173715'], 'search_results_social.20251016_170210': ['/Users/emilwl/Documents/QATIS/search_results_social/20251016_170210'], 'search_results_social.20251016_171551': ['/Users/emilwl/Documents/QATIS/search_results_social/20251016_171551']}
PATH_PLACEHOLDER = '__editable__.qatis-0.1.0.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
